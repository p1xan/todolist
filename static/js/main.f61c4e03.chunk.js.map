{"version":3,"sources":["api/todolists-API.ts","reportWebVitals.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","Task","onChangeTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","className","status","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodolistTitle","tasksForTodolist","tasks","filter","t","aria-label","removeTodolist","map","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","useEffect","res","action","type","setTodolistsAC","data","taskId","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","allTodolistTask","item","Paper","rootReducer","combineReducers","addedDate","order","todolist","find","stateCopy","filteredTasks","newTask","todoListId","description","startDate","deadline","priority","Low","newTasks","todolistTasks","copyState","forEach","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f61c4e03.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"5ef544a3-f9f0-42e5-96f2-1621636d3144\"\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    description: string\r\n    title: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New ,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`)\r\n        return promise\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n        return promise\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n    },\r\n\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const  AddItemForm = React.memo( (props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim())\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n\r\n    }\r\n    return <div>\r\n        <TextField value={newTaskTitle}\r\n                   variant={\"outlined\"}\r\n                   label={'Type value'}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addTask}  color={\"primary\"}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n    </div>\r\n});","import { TextField } from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange:(newValue:string) => void\r\n}\r\n\r\nexport const  EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-API\";\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (taskId: string, status:TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo( (props: TaskPropsType) => {\r\n    const onRemoveHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n\r\n    }\r\n    const onChangeTitleChangeHandler =useCallback( (newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.task.id,props.changeTaskTitle,props.todolistId]);\r\n\r\n    return <div className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"} key={props.task.id}>\r\n        <Checkbox onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed}/>\r\n\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleChangeHandler}/>\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n});","import React, {useCallback} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-API\";\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status:TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo( function (props: PropsType) {\r\n\r\n    const onAllClickHandler =useCallback( () => {\r\n        props.changeFilter('all', props.id)\r\n    },[ props.changeFilter,props.id])\r\n    const onActiveClickHandler =useCallback( () => {\r\n        props.changeFilter('active', props.id)\r\n    },[props.changeFilter,props.id])\r\n    const onCompletedClickHandler =useCallback( () => {\r\n        props.changeFilter('completed', props.id)\r\n    },[props.changeFilter,props.id])\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback( (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    },[props.id,props.changeTodolistTitle])\r\n\r\n    const addTask = useCallback( (title: string) => {\r\n        props.addTask(title, props.id)\r\n    },[props.addTask,props.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n\r\n            <IconButton aria-label=\"delete\" onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                />)\r\n\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'contained' : 'text'} onClick={onAllClickHandler}>All</Button>\r\n            <Button color={\"primary\"} variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    onClick={onActiveClickHandler}>Active</Button>\r\n            <Button color={\"secondary\"} variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    onClick={onCompletedClickHandler}>Completed</Button>\r\n        </div>\r\n    </div>\r\n});\r\n\r\n","import {v1} from \"uuid\";\r\nimport { TodolistType } from \"../api/todolists-API\";\r\n\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType |\r\n    ChangeTodolistTitleActionType | ChangeTodolistFilterActionType | SetTodolistsActionType\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodolistsActionType = {\r\n    type:'SET-TODOLIST'\r\n    todolists:Array<TodolistType>\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter:FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate:'',\r\n                order:0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n            case 'SET-TODOLIST': {\r\n                return action.todolists.map(tl => {\r\n                    return {\r\n                        ...tl,\r\n                        filter: 'all'\r\n                    }\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = ( id: string,title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport const setTodolistsAC = (todolists:Array<TodolistType>):SetTodolistsActionType => {\r\n    return {type:'SET-TODOLIST', todolists:todolists}\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {TaskPriorities, TaskStatuses} from \"../api/todolists-API\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status:TaskStatuses\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n    | AddTodolistActionType | RemoveTodolistActionType | SetTodolistsActionType\r\n\r\n\r\nconst initialState: TasksStateType = { }\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todolistId]\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state};\r\n            const newTask = {id: v1(), title: action.title, status: TaskStatuses.New,\r\n                todoListId:action.todolistId,description:'',startDate:'',\r\n                deadline:'',addedDate:'',order:0,priority:TaskPriorities.Low}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId]\r\n            let task = todolistTasks.find(t => t.id === action.taskId)\r\n            state[action.todolistId] = todolistTasks.map(t=>t.id === action.taskId ? {...t,status: action.status} : t)\r\n            return ({...state})\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId]\r\n            let task = todolistTasks.find(t => t.id === action.taskId)\r\n            state[action.todolistId] = todolistTasks.map(t=>t.id === action.taskId ? {...t,title: action.title} : t)\r\n            return {...state}\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLIST': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = [];\r\n            })\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId: todolistId, taskId: taskId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title: title, todolistId: todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status:TaskStatuses, todolistId: string)\r\n    : ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, status, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string)\r\n    : ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport {Todolist} from \"./Todolist\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\nimport {Menu} from \"@material-ui/icons\";\nimport {\n    addTodolistAC,\n    changeTodolistFilterAC,\n    changeTodolistTitleAC, FilterValuesType, removeTodolistAC, setTodolistsAC, TodolistDomainType\n} from \"./state/todolists-reducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootState} from './state/store';\nimport {useCallback} from 'react';\nimport {TaskStatuses, TaskType, todolistsAPI} from \"./api/todolists-API\";\n\n\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n\n\n\n    const todolists = useSelector<AppRootState, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        todolistsAPI.getTodolists()\n            .then(res => {\n            const action = setTodolistsAC(res.data)\n                dispatch(action);\n            })\n    },[])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const action = removeTaskAC(id, todolistId);\n        dispatch(action)\n    }, [dispatch]);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const action = addTaskAC(title, todolistId)\n        dispatch(action)\n    }, [dispatch]);\n\n    const changeStatus = useCallback(function (taskId: string, status:TaskStatuses, todolistId: string) {\n        const action = changeTaskStatusAC(taskId, status, todolistId)\n        dispatch(action)\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\n        const action = changeTaskTitleAC(taskId, newTitle, todolistId)\n        dispatch(action)\n    }, [dispatch])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(value, todolistId)\n        dispatch(action)\n    }, [dispatch])\n\n    const removeTodolist = useCallback(function (todolistId: string) {\n        const action = removeTodolistAC(todolistId)\n        dispatch(action)\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\n        const action = changeTodolistTitleAC(id, title)\n        dispatch(action)\n    }, [])\n\n    const addTodolist = useCallback((title: string) => {\n        const action = addTodolistAC(title)\n        dispatch(action)\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Login\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    <AddItemForm addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={5}>\n                    {\n                        todolists.map(tl => {\n                            let allTodolistTask = tasks[tl.id]\n\n                            return <Grid item>\n                                <Paper style={{padding: \"10px\"}}>\n                                    <Todolist title={tl.title}\n                                              tasks={allTodolistTask}\n                                              removeTask={removeTask}\n                                              changeFilter={changeFilter}\n                                              addTask={addTask}\n                                              changeTaskStatus={changeStatus}\n                                              changeTaskTitle={changeTaskTitle}\n                                              filter={tl.filter}\n                                              id={tl.id}\n                                              key={tl.id}\n                                              removeTodolist={removeTodolist}\n                                              changeTodolistTitle={changeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}