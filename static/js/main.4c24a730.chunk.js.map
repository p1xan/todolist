{"version":3,"sources":["reportWebVitals.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","removeTask","Delete","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodolistTitle","newTitle","tasksForTodolist","tasks","filter","t","aria-label","removeTodolist","map","Button","initialState","todolistId1","v1","todolistId2","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","removeTodolistAC","changeTodolistTitleAC","addTodolist","addTodolistAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","allTodolistTask","item","Paper","rootReducer","combineReducers","todolist","find","stateCopy","filteredTasks","newTask","newTasks","todolistTasks","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c24a730.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const  AddItemForm = React.memo( (props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim())\r\n            setNewTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n\r\n    }\r\n    return <div>\r\n        <TextField value={newTaskTitle}\r\n                   variant={\"outlined\"}\r\n                   label={'Type value'}\r\n                   onChange={onNewTitleChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addTask}  color={\"primary\"}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n    </div>\r\n});","import { TextField } from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange:(newValue:string) => void\r\n}\r\n\r\nexport const  EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo( (props: TaskPropsType) => {\r\n    const onRemoveHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n\r\n    }\r\n    const onChangeTitleChangeHandler =useCallback( (newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.task.id,props.changeTaskTitle,props.todolistId]);\r\n\r\n    return <div className={props.task.isDone ? \"is-done\" : \"\"} key={props.task.id}><Checkbox\r\n        onChange={onChangeHandler}\r\n        checked={props.task.isDone}/>\r\n\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleChangeHandler}/>\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n});","import React, {useCallback} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo( function (props: PropsType) {\r\n\r\n    const onAllClickHandler =useCallback( () => {\r\n        props.changeFilter('all', props.id)\r\n    },[ props.changeFilter,props.id])\r\n    const onActiveClickHandler =useCallback( () => {\r\n        props.changeFilter('active', props.id)\r\n    },[props.changeFilter,props.id])\r\n    const onCompletedClickHandler =useCallback( () => {\r\n        props.changeFilter('completed', props.id)\r\n    },[props.changeFilter,props.id])\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback( (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle);\r\n    },[props.changeTodolistTitle,props.id])\r\n    const addTask = useCallback( (title: string) => {\r\n        props.addTask(title, props.id)\r\n    },[props.addTask,props.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n\r\n            <IconButton aria-label=\"delete\" onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                />)\r\n\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'contained' : 'text'} onClick={onAllClickHandler}>All</Button>\r\n            <Button color={\"primary\"} variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    onClick={onActiveClickHandler}>Active</Button>\r\n            <Button color={\"secondary\"} variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    onClick={onCompletedClickHandler}>Completed</Button>\r\n        </div>\r\n    </div>\r\n});\r\n\r\n","import {v1} from \"uuid\";\r\nimport {FilterValuesType, TodolistType} from \"../App\";\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType |\r\n    ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (title: string, id: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {TasksStateType} from \"../App\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n    | AddTodolistActionType | RemoveTodolistActionType\r\n\r\nlet todolistId1 = v1()\r\nlet todolistId2 = v1()\r\n\r\nconst initialState: TasksStateType = {\r\n    [todolistId1]: [\r\n        {id: v1(), title: \"CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n        {id: v1(), title: \"Redux\", isDone: false},\r\n    ],\r\n    [todolistId2]: [\r\n        {id: v1(), title: \"book\", isDone: true},\r\n        {id: v1(), title: \"beer\", isDone: true},\r\n        {id: v1(), title: \"bread\", isDone: false},\r\n        {id: v1(), title: \"milk\", isDone: false},\r\n    ]\r\n}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todolistId]\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTask = {id: v1(), title: action.title, isDone: false}\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId]\r\n            let task = todolistTasks.find(t => t.id === action.taskId)\r\n            state[action.todolistId] = todolistTasks.map(t=>t.id === action.taskId ? {...t,isDone: action.isDone} : t)\r\n            return ({...state})\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId]\r\n            let task = todolistTasks.find(t => t.id === action.taskId)\r\n            state[action.todolistId] = todolistTasks.map(t=>t.id === action.taskId ? {...t,title: action.title} : t)\r\n            return ({...state})\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId: todolistId, taskId: taskId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title: title, todolistId: todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string)\r\n    : ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string)\r\n    : ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}","import React, {useState} from 'react';\nimport {v1} from 'uuid';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\nimport {Menu} from \"@material-ui/icons\";\nimport {useReducer} from 'react';\nimport {\n    addTodolistAC,\n    changeTodolistFilterAC,\n    changeTodolistTitleAC, removeTodolistAC,\n    todolistsReducer\n} from \"./state/todolists-reducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootState} from './state/store';\nimport {useCallback} from 'react';\n\n\nexport type FilterValuesType = 'all' | 'completed' | 'active'\nexport type TodolistType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n\n\n\n    const todolists = useSelector<AppRootState, Array<TodolistType>>(state => state.todolists)\n    const tasks = useSelector<AppRootState, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch();\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const action = removeTaskAC(id, todolistId);\n        dispatch(action)\n    }, [dispatch]);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const action = addTaskAC(title, todolistId)\n        dispatch(action)\n    }, [dispatch]);\n\n    const changeStatus = useCallback(function (taskId: string, isDone: boolean, todolistId: string) {\n        const action = changeTaskStatusAC(taskId, isDone, todolistId)\n        dispatch(action)\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\n        const action = changeTaskTitleAC(taskId, newTitle, todolistId)\n        dispatch(action)\n    }, [dispatch])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(value, todolistId)\n        dispatch(action)\n    }, [dispatch])\n\n    const removeTodolist = useCallback(function (todolistId: string) {\n        const action = removeTodolistAC(todolistId)\n        dispatch(action)\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\n        const action = changeTodolistTitleAC(id, newTitle)\n        dispatch(action)\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string) => {\n        const action = addTodolistAC(title)\n        dispatch(action)\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Login\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    <AddItemForm addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={5}>\n                    {\n                        todolists.map(tl => {\n                            let allTodolistTask = tasks[tl.id]\n\n                            return <Grid item>\n                                <Paper style={{padding: \"10px\"}}>\n                                    <Todolist title={tl.title}\n                                              tasks={allTodolistTask}\n                                              removeTask={removeTask}\n                                              changeFilter={changeFilter}\n                                              addTask={addTask}\n                                              changeTaskStatus={changeStatus}\n                                              changeTaskTitle={changeTaskTitle}\n                                              filter={tl.filter}\n                                              id={tl.id}\n                                              key={tl.id}\n                                              removeTodolist={removeTodolist}\n                                              changeTodolistTitle={changeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}