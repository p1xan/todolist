{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","addItem","useState","title","setTitle","error","setError","onAddTaskClick","trim","TextField","variant","value","label","helperText","onChange","e","currentTarget","onKeyUp","ctrlKey","key","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","TodoList","tasks","map","t","id","className","isDone","Checkbox","checked","changeStatus","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","size","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","newTask","removeTasks","taskID","todoList","find","tl","task","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodoListID","newTodoList","spacing","tasksForTodoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1853819a.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox, } from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const addItem = props.addItem\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddTaskClick = () => {\r\n        if (title.trim()) {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    const onKeyUpHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.ctrlKey && e.key === \"Enter\") {\r\n            onAddTaskClick()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<input\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyUp = {onKeyUpHandler}\r\n                className={error ? \"error\": \"\"}\r\n            />*/}\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                onChange={onChangeHandler}\r\n                onKeyUp={onKeyUpHandler}\r\n\r\n            />\r\n            {/*<button onClick={onAddTaskClick}>+</button>*/}\r\n            {/*<Button onClick={onAddTaskClick} variant={\"contained\"} color={\"primary\"}>+</Button>*/}\r\n            <IconButton color={\"primary\"} onClick={onAddTaskClick} >\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    changeValue:(value:string) => void\r\n\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n        props.changeValue(title)\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n    {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?\r\n        <TextField\r\n            variant={\"outlined\"}\r\n            value={title}\r\n            onBlur={deActivatedEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        /*<input\r\n            value={title}\r\n            onBlur={deActivatedEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n        />*/\r\n        : <span onDoubleClick={activatedEditMode}>{props.value}</span>\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport { Delete} from \"@material-ui/icons\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (todoListID: string, title: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const tasks = props.tasks.map(t => {\r\n            const removeTask = () => {\r\n                props.removeTask(t.id, props.id)\r\n            };\r\n            const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n\r\n            const changeTaskTitle = (value: string) => {\r\n                props.changeTaskTitle(t.id, value, props.id)\r\n            }\r\n            return (\r\n                <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                    <Checkbox\r\n                        color={\"primary\"}\r\n                        checked={t.isDone}\r\n                        onChange={changeStatus}\r\n                    />\r\n                    {/*<input\r\n                        type=\"checkbox\"\r\n                        checked={t.isDone}\r\n                        onChange={changeStatus}\r\n                    />*/}\r\n                    <EditableSpan value={t.title} changeValue={changeTaskTitle}/>\r\n                    <IconButton onClick={removeTask}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                    {/*<button onClick={removeTask}>X</button>*/}\r\n                </div>\r\n            )\r\n        }\r\n    )\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} changeValue={changeTodolistTitle}/>\r\n                {/*<button onClick={() => {props.removeTodoList(props.id)}}>X</button>*/}\r\n                <IconButton  onClick={() =>{props.removeTodoList(props.id)}}>\r\n                    <Delete/>\r\n                </IconButton>\r\n\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"all\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    /*className={props.filter === \"all\" ? \"active-filter\" : \"\"}*/\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"active\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    /*className={props.filter === \"active\" ? \"active-filter\" : \"\"}*/\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"completed\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    /*className={props.filter === \"completed\" ? \"active-filter\" : \"\"}*/\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport  type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\ntype TodolistType = {\r\n    id:string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string] : Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n/*\r\n    let [tasks, setTasks] = useState<Array<TaskType>>(\r\n        [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: true},\r\n            {id: v1(), title: \"Rest API\", isDone: true},\r\n        ]\r\n    )*/\r\n\r\n\r\n    let todoListID1 = v1()\r\n    let todoListID2 = v1()\r\n\r\n\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodolistType>>([\r\n        {id: todoListID1, title:\"What to learn\", filter:\"all\"},\r\n        {id: todoListID2, title:\"What to buy\", filter:\"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1] : [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: true},\r\n            {id: v1(), title: \"Rest API\", isDone: true},],\r\n        [todoListID2] : [\r\n            {id: v1(), title: \"Books\", isDone: true},\r\n            {id: v1(), title: \"Butter\", isDone: false},\r\n            {id: v1(), title: \"Onion\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: true},]\r\n    })\r\n\r\n\r\n    function addTask(title:string, todoListID:string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTasks(taskID: string, todoListID:string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID]=todoListTasks.filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID:string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if(todoList){\r\n            todoList.filter = value;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(taskID:string, isDone:boolean,todoListID:string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(t => t.id === taskID);\r\n        if(task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID:string) {\r\n       setTodoLists( todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodoList (title:string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodolistType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists,newTodoList])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    function changeTaskTitle (taskID:string, title:string, todoListID:string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find( task => task.id === taskID)\r\n        if(task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle (todoListID:string, title:string) {\r\n        const todoList = todoLists.find(tl=> tl.id === todoListID)\r\n        if(todoList) {\r\n            todoList.title = title\r\n            setTodoLists([...todoLists])\r\n        }\r\n\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" >\r\n                    News\r\n                </Typography>\r\n                <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Grid container style={{padding:\"20px\"}}>\r\n        <AddItemForm addItem={addTodoList} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n\r\n        {\r\n            todoLists.map(tl => {\r\n                let tasksForTodoList = tasks[tl.id];\r\n                if (tl.filter === \"active\") {\r\n                    tasksForTodoList = tasks[tl.id].filter(t => t.isDone === false)\r\n                }\r\n                if (tl.filter === \"completed\") {\r\n                    tasksForTodoList = tasks[tl.id].filter(t => t.isDone === true)\r\n                }\r\n\r\n                return <Grid item>\r\n                    <Paper style={{padding:\"10px\"}}>\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTasks}\r\n                        changeFilter={changeFilter}\r\n                        changeStatus={changeStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                    </Paper>\r\n                    </Grid>\r\n            })\r\n        }</Grid>\r\n\r\n        </Container>\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}