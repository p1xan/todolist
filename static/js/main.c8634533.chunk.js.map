{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","addItem","useState","title","setTitle","error","setError","onAddTaskClick","trim","value","onChange","e","currentTarget","onKeyUp","ctrlKey","key","className","onClick","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","TodoList","tasks","map","t","id","isDone","type","checked","changeStatus","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","newTask","removeTasks","taskID","todoList","find","tl","task","newTodoListID","newTodoList","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c8634533.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nfunction AddItemForm(props:AddItemFormPropsType) {\r\n    const addItem = props.addItem\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState <string|null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n    {\r\n        setError(null);\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddTaskClick = () => {\r\n        if(title.trim()){\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    const onKeyUpHandler = (e: KeyboardEvent<HTMLInputElement>) => {if(e.ctrlKey && e.key === \"Enter\"){onAddTaskClick()}}\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyUp = {onKeyUpHandler}\r\n                className={error ? \"error\": \"\"}\r\n            />\r\n            <button onClick={onAddTaskClick}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    changeValue:(value:string) => void\r\n\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(true)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n        props.changeValue(title)\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n    {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input\r\n            value={title}\r\n            onBlur={deActivatedEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n        />\r\n        : <span onDoubleClick={activatedEditMode}>{props.value}</span>\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\n\r\n\r\n\r\n\r\ntype PropsType = {\r\n    id:string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string,todoListID:string) => void\r\n    removeTask: (taskID: string, todoListID:string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID:string) => void\r\n    changeStatus: (taskID:string, isDone:boolean,todoListID:string) => void\r\n    removeTodoList:(todoListID:string) => void\r\n    changeTaskTitle:(taskID:string, title:string, todoListID:string) => void\r\n    changeTodoListTitle:(todoListID:string, title:string) =>void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const tasks = props.tasks.map(t => {\r\n            const removeTask = () => {\r\n                props.removeTask(t.id, props.id)\r\n            };\r\n            const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n\r\n            const changeTaskTitle = (value:string) => {\r\n                props.changeTaskTitle(t.id, value, props.id)\r\n            }\r\n            return (\r\n                <li key={t.id} className={t.isDone ? \"is-done\": \"\"}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={t.isDone}\r\n                        onChange = {changeStatus}\r\n                    />\r\n                    <EditableSpan value={t.title} changeValue={changeTaskTitle}/>\r\n                    <button onClick={removeTask}>X</button>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n\r\n    const addTask = (title:string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTodolistTitle = (title:string) =>{\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n      const onAllClickHandler = () => props.changeFilter(\"all\",props.id)\r\n      const onActiveClickHandler = () => props.changeFilter(\"active\",props.id)\r\n      const onCompletedClickHandler = () => props.changeFilter(\"completed\",props.id)\r\n\r\n\r\n    return (\r\n        <div>\r\n           <h3>\r\n               <EditableSpan value={props.title} changeValue={changeTodolistTitle} />\r\n               <button onClick={() => {props.removeTodoList(props.id)}}>X</button>\r\n           </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={onAllClickHandler}>All</button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"} onClick={onActiveClickHandler}>Active</button>\r\n                <button className={props.filter === \"completed\" ? \"active-filter\" : \"\"} onClick={onCompletedClickHandler}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport  type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\ntype TodolistType = {\r\n    id:string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string] : Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n/*\r\n    let [tasks, setTasks] = useState<Array<TaskType>>(\r\n        [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: true},\r\n            {id: v1(), title: \"Rest API\", isDone: true},\r\n        ]\r\n    )*/\r\n\r\n\r\n    let todoListID1 = v1()\r\n    let todoListID2 = v1()\r\n\r\n\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodolistType>>([\r\n        {id: todoListID1, title:\"What to learn\", filter:\"all\"},\r\n        {id: todoListID2, title:\"What to buy\", filter:\"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1] : [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: true},\r\n            {id: v1(), title: \"Rest API\", isDone: true},],\r\n        [todoListID2] : [\r\n            {id: v1(), title: \"Books\", isDone: true},\r\n            {id: v1(), title: \"Butter\", isDone: false},\r\n            {id: v1(), title: \"Onion\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Fish\", isDone: true},]\r\n    })\r\n\r\n\r\n    function addTask(title:string, todoListID:string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTasks(taskID: string, todoListID:string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        tasks[todoListID]=todoListTasks.filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID:string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if(todoList){\r\n            todoList.filter = value;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(taskID:string, isDone:boolean,todoListID:string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(t => t.id === taskID);\r\n        if(task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID:string) {\r\n       setTodoLists( todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodoList (title:string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodolistType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists,newTodoList])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    function changeTaskTitle (taskID:string, title:string, todoListID:string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find( task => task.id === taskID)\r\n        if(task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle (todoListID:string, title:string) {\r\n        const todoList = todoLists.find(tl=> tl.id === todoListID)\r\n        if(todoList) {\r\n            todoList.title = title\r\n            setTodoLists([...todoLists])\r\n        }\r\n\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <AddItemForm addItem={addTodoList} />\r\n        {\r\n            todoLists.map(tl => {\r\n                let tasksForTodoList = tasks[tl.id];\r\n                if (tl.filter === \"active\") {\r\n                    tasksForTodoList = tasks[tl.id].filter(t => t.isDone === false)\r\n                }\r\n                if (tl.filter === \"completed\") {\r\n                    tasksForTodoList = tasks[tl.id].filter(t => t.isDone === true)\r\n                }\r\n\r\n                return (\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTasks}\r\n                        changeFilter={changeFilter}\r\n                        changeStatus={changeStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n\r\n    </div>\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}