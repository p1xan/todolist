{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","addItem","useState","title","setTitle","error","setError","onAddTaskClick","trim","TextField","variant","value","label","helperText","onChange","e","currentTarget","onKeyUp","ctrlKey","key","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","TodoList","tasks","map","t","id","className","isDone","Checkbox","checked","changeStatus","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","size","filter","changeFilter","initialState","RemoveTodoListAC","todolistID","type","v1","AppWitchRedux","todoLists","useSelector","state","dispatch","useDispatch","removeTasks","taskID","todoListID","removeTaskAC","addTaskAC","changeTaskStatusAC","ChangeFilterAC","changeTaskTitleAC","ChangeTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","action","AddTodoListAC","spacing","tl","tasksForTodoList","item","Paper","rootReducer","combineReducers","copyState","task","todoListTasks","find","nextState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uDC8CSC,MAvDf,SAAqBC,GACjB,IAAMC,EAAUD,EAAMC,QADwB,EAGtBC,mBAAiB,IAHK,mBAGzCC,EAHyC,KAGlCC,EAHkC,OAItBF,mBAAwB,MAJF,mBAIzCG,EAJyC,KAIlCC,EAJkC,KAWxCC,EAAiB,WACfJ,EAAMK,QACNP,EAAQE,EAAMK,QACdJ,EAAS,KAETE,EAAS,uBAUjB,OACI,6BAOI,kBAACG,EAAA,EAAD,CACIC,QAAS,WACTC,MAAOR,EACPE,QAASA,EACTO,MAAO,QACPC,WAAYR,EACZS,SAlCY,SAACC,GACrBT,EAAS,MACTF,EAASW,EAAEC,cAAcL,QAiCjBM,QArBW,SAACF,GAChBA,EAAEG,SAAqB,UAAVH,EAAEI,KACfZ,OAwBA,kBAACa,EAAA,EAAD,CAAYC,MAAO,UAAWC,QAASf,GACnC,kBAACgB,EAAA,EAAD,SCVDC,MArCf,SAAsBxB,GAA+B,IAAD,EAElBE,oBAAkB,GAFA,mBAE3CuB,EAF2C,KAEjCC,EAFiC,OAGxBxB,mBAAiBF,EAAMW,OAHC,mBAG3CR,EAH2C,KAGpCC,EAHoC,KAkBhD,OAAOqB,EAEH,kBAAChB,EAAA,EAAD,CACIC,QAAS,WACTC,MAAOR,EACPwB,OAdoB,WACxBD,GAAY,GACZ1B,EAAM4B,YAAYzB,IAad0B,WAAW,EACXf,SAZgB,SAACC,GAErBX,EAASW,EAAEC,cAAcL,UAmBvB,0BAAMmB,cA7Bc,WACtBJ,GAAY,GACZ1B,EAAM4B,YAAYzB,KA2ByBH,EAAMW,Q,2BCpBlD,SAASoB,EAAS/B,GACrB,IAAMgC,EAAQhC,EAAMgC,MAAMC,KAAI,SAAAC,GAUtB,OACI,yBAAKf,IAAKe,EAAEC,GAAIC,UAAWF,EAAEG,OAAS,UAAY,IAC9C,kBAACC,EAAA,EAAD,CACIjB,MAAO,UACPkB,QAASL,EAAEG,OACXvB,SAXS,SAACC,GAAD,OACjBf,EAAMwC,aAAaN,EAAEC,GAAIpB,EAAEC,cAAcuB,QAASvC,EAAMmC,OAiBpD,kBAAC,EAAD,CAAcxB,MAAOuB,EAAE/B,MAAOyB,YAfd,SAACjB,GACrBX,EAAMyC,gBAAgBP,EAAEC,GAAIxB,EAAOX,EAAMmC,OAerC,kBAACf,EAAA,EAAD,CAAYE,QAtBD,WACftB,EAAM0C,WAAWR,EAAEC,GAAInC,EAAMmC,MAsBrB,kBAACQ,EAAA,EAAD,WAoBpB,OACI,6BACI,4BACI,kBAAC,EAAD,CAAchC,MAAOX,EAAMG,MAAOyB,YAZlB,SAACzB,GACzBH,EAAM4C,oBAAoB5C,EAAMmC,GAAIhC,MAa5B,kBAACiB,EAAA,EAAD,CAAaE,QAAS,WAAMtB,EAAM6C,eAAe7C,EAAMmC,MACnD,kBAACQ,EAAA,EAAD,QAIR,kBAAC,EAAD,CAAa1C,QAtBL,SAACE,GACbH,EAAM8C,QAAQ3C,EAAOH,EAAMmC,OAuBvB,6BACKH,GAEL,6BACI,kBAACe,EAAA,EAAD,CACIC,KAAM,QACN3B,MAAwB,QAAjBrB,EAAMiD,OAAmB,UAAY,UAC5CvC,QAAS,YAETY,QA1BU,kBAAMtB,EAAMkD,aAAa,MAAOlD,EAAMmC,MAqBpD,OAOA,kBAACY,EAAA,EAAD,CACIC,KAAM,QACN3B,MAAwB,WAAjBrB,EAAMiD,OAAsB,UAAY,UAC/CvC,QAAS,YAETY,QAhCa,kBAAMtB,EAAMkD,aAAa,SAAUlD,EAAMmC,MA2B1D,UAOA,kBAACY,EAAA,EAAD,CACIC,KAAM,QACN3B,MAAwB,cAAjBrB,EAAMiD,OAAyB,UAAY,UAClDvC,QAAS,YAETY,QAtCgB,kBAAMtB,EAAMkD,aAAa,YAAalD,EAAMmC,MAiChE,e,6FC1EZgB,EAAoC,CACpC,CAAChB,GAAI,cAAehC,MAAO,gBAAiB8C,OAAQ,OACpD,CAACd,GAAI,cAAehC,MAAO,cAAe8C,OAAQ,QAqCzCG,EAAmB,SAACC,GAC7B,MAAO,CAACC,KAAM,kBAAmBnB,GAAGkB,I,QCpCpCF,GAA4B,mBAC3B,cAAgB,CACjB,CAAChB,GAAIoB,cAAMpD,MAAO,WAAYkC,QAAQ,GACtC,CAACF,GAAIoB,cAAMpD,MAAO,KAAMkC,QAAQ,KAHJ,cAK3B,cAAgB,CACjB,CAACF,GAAIoB,cAAMpD,MAAO,QAASkC,QAAQ,GACnC,CAACF,GAAIoB,cAAMpD,MAAO,SAAUkC,QAAQ,KAPR,GCiGjBmB,MA9Ff,WAEI,IAAIC,EAAYC,aAAmD,SAAAC,GAAK,OAAIA,EAAMF,aAC9EzB,EAAQ0B,aAA6C,SAAAC,GAAK,OAAGA,EAAM3B,SAEnE4B,EAAWC,cAEf,SAASC,EAAYC,EAAgBC,GACjCJ,EDiDoB,SAACG,EAAgBV,GACzC,MAAO,CAACC,KAAM,cAAeS,OAAQA,EAAQV,WAAYA,GClD5CY,CAAaF,EAAOC,IAEjC,SAASlB,EAAQ3C,EAAe6D,GAC5BJ,EDiDiB,SAACzD,EAAekD,GACrC,MAAO,CAACC,KAAM,WAAYnD,QAAOkD,cClDpBa,CAAU/D,EAAM6D,IAE7B,SAASxB,EAAauB,EAAgB1B,EAAiB2B,GACnDJ,EDkD0B,SAACG,EAAgB1B,EAAiBgB,GAChE,MAAO,CAACC,KAAM,qBAAqBS,SAAQ1B,SAAQgB,cCnDtCc,CAAmBJ,EAAO1B,EAAO2B,IAI9C,SAASd,EAAavC,EAAyBqD,GAC3CJ,EFsBsB,SAACI,EAAoBf,GAC/C,MAAO,CAACK,KAAM,yBAA0BnB,GAAG6B,EAAYf,OAAQA,GEvBlDmB,CAAeJ,EAAWrD,IAGvC,SAASkC,EAAemB,GACpBJ,EAASR,EAAiBY,IAC1BJ,EAASR,EAAiBY,IAQ9B,SAASvB,EAAgBsB,EAAgB5D,EAAe6D,GACpDJ,EDkCyB,SAACG,EAAgB5D,EAAekD,GAC7D,MAAO,CAACC,KAAM,oBAAqBS,SAAQ5D,QAAOkD,cCnCrCgB,CAAkBN,EAAO5D,EAAM6D,IAG5C,SAASpB,EAAoBoB,EAAoB7D,GAC7CyD,EFCqB,SAACP,EAAoBlD,GAC9C,MAAO,CAACmD,KAAM,wBAAwBnB,GAAGkB,EAAYlD,MAAOA,GEF/CmE,CAAcN,EAAW7D,IAGtC,OAAO,yBAAKiC,UAAU,OAClB,kBAACmC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACrD,EAAA,EAAD,CAAYsD,KAAK,QAAQrD,MAAM,UAAUsD,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYnE,QAAQ,MAApB,QAGA,kBAACqC,EAAA,EAAD,CAAQ1B,MAAM,WAAd,WAGR,kBAACyD,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,SAC7B,kBAAC,EAAD,CAAalF,QA3BzB,SAAqBE,GACjB,IAAIiF,EFOiB,SAACjF,GAC1B,MAAO,CAACmD,KAAM,eAAgBnD,MAAOA,EAAOkD,WAAWE,eERtC8B,CAAclF,GAC3ByD,EAASwB,OA2BL,kBAACJ,EAAA,EAAD,CAAMC,WAAW,EAAMK,QAAS,GAGxB7B,EAAUxB,KAAI,SAAAsD,GACV,IAAIC,EAAmBxD,EAAMuD,EAAGpD,IAQhC,MAPkB,WAAdoD,EAAGtC,SACHuC,EAAmBxD,EAAMuD,EAAGpD,IAAIc,QAAO,SAAAf,GAAC,OAAiB,IAAbA,EAAEG,WAEhC,cAAdkD,EAAGtC,SACHuC,EAAmBxD,EAAMuD,EAAGpD,IAAIc,QAAO,SAAAf,GAAC,OAAiB,IAAbA,EAAEG,WAG3C,kBAAC2C,EAAA,EAAD,CAAMS,MAAM,EAAMtE,IAAKoE,EAAGpD,IAC7B,kBAACuD,EAAA,EAAD,CAAOR,MAAO,CAACC,QAAS,SACpB,kBAACpD,EAAD,CAEII,GAAIoD,EAAGpD,GACPhC,MAAOoF,EAAGpF,MACV6B,MAAOwD,EACPvC,OAAQsC,EAAGtC,OACXH,QAASA,EACTJ,WAAYoB,EACZZ,aAAcA,EACdV,aAAcA,EACdK,eAAgBA,EAChBJ,gBAAiBA,EACjBG,oBAAqBA,a,QC3GnD+C,EAAcC,YAAgB,CAChC5D,MFsCwB,WAA6D,IAA5D2B,EAA2D,uDAArDR,EAAciC,EAAuC,uCACpF,OAAQA,EAAO9B,MACX,IAAK,cACD,IAAIuC,EAAS,eAAOlC,GAEpB,OADAkC,EAAUT,EAAO/B,YAAcwC,EAAUT,EAAO/B,YAAYJ,QAAO,SAAAf,GAAC,OAAIA,EAAEC,KAAOiD,EAAOrB,UACjF8B,EAEX,IAAK,WACD,IAAIC,EAAO,CAAC3D,GAAIoB,cAAMpD,MAAOiF,EAAOjF,MAAOkC,QAAQ,GACnD,OAAO,2BAAIsB,GAAX,kBAAmByB,EAAO/B,WAA1B,CAAwCyC,GAAxC,mBAAiDnC,EAAMyB,EAAO/B,gBAElE,IAAK,qBAED,IAAI0C,EAAgBpC,EAAMyB,EAAO/B,YAE7ByC,EAAOC,EAAcC,MAAK,SAAA9D,GAAC,OAAIA,EAAEC,KAAOiD,EAAOrB,UAInD,OAHI+B,IACAA,EAAKzD,OAAS+C,EAAO/C,QAElB,2BAAIsB,GAAX,kBAAmByB,EAAO/B,WAAa0C,IAE3C,IAAK,oBACD,IAAIA,EAAgBpC,EAAMyB,EAAO/B,YAC7ByC,EAAOC,EAAcC,MAAK,SAAA9D,GAAC,OAAIA,EAAEC,KAAOiD,EAAOrB,UAInD,OAHI+B,IACAA,EAAK3F,MAAQiF,EAAOjF,OAEjB,2BAAIwD,GAAX,kBAAmByB,EAAOjF,MAAQ4F,IAEtC,IAAK,eACD,OAAO,2BAAIpC,GAAX,kBAAkByB,EAAO/B,WAAY,KAGzC,IAAK,kBACD,IAAIwC,EAAS,eAAOlC,GAEpB,cADOkC,EAAUT,EAAOjD,IACjB0D,EAEX,QACI,OAAOlC,IE5EfF,UHuB2B,WAAiE,IAAhEE,EAA+D,uDAAzDR,EAAciC,EAA2C,uCAC3F,OAAQA,EAAO9B,MACX,IAAK,kBACD,OAAOK,EAAMV,QAAO,SAAAsC,GAAE,OAAIA,EAAGpD,KAAOiD,EAAOjD,MAC/C,IAAK,eACD,MAAM,GAAN,mBAAWwB,GAAX,CAAkB,CAACxB,GAAGiD,EAAO/B,WAAYlD,MAAMiF,EAAOjF,MAAM8C,OAAO,SACvE,IAAK,wBACD,IAAMgD,EAAYtC,EAAM1B,KAAI,SAAAsD,GAExB,OAAGA,EAAGpD,KAAOiD,EAAOjD,GACT,2BAAIoD,GAAX,IAAepF,MAAOiF,EAAOjF,QAE1BoF,KAEX,OAAOU,EAGX,IAAK,yBACD,OAAQtC,EAAM1B,KAAI,SAAAsD,GAEd,OAAGA,EAAGpD,KAAOiD,EAAOjD,GACT,2BAAIoD,GAAX,IAAetC,OAAQmC,EAAOnC,SAE3BsC,KAIf,QACE,OAAO5B,MGhDJuC,EAAQC,YAAYR,GAMjChG,OAAOuG,MAAQA,ECRfE,IAASC,OACT,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAA8BI,SAASC,eAAe,SRgIpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzG,GACL0G,QAAQ1G,MAAMA,EAAM2G,c","file":"static/js/main.2ee4ec4e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox, } from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const addItem = props.addItem\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddTaskClick = () => {\r\n        if (title.trim()) {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    const onKeyUpHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.ctrlKey && e.key === \"Enter\") {\r\n            onAddTaskClick()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<input\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyUp = {onKeyUpHandler}\r\n                className={error ? \"error\": \"\"}\r\n            />*/}\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                onChange={onChangeHandler}\r\n                onKeyUp={onKeyUpHandler}\r\n\r\n            />\r\n            {/*<button onClick={onAddTaskClick}>+</button>*/}\r\n            {/*<Button onClick={onAddTaskClick} variant={\"contained\"} color={\"primary\"}>+</Button>*/}\r\n            <IconButton color={\"primary\"} onClick={onAddTaskClick} >\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    changeValue:(value:string) => void\r\n\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n        props.changeValue(title)\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n    {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?\r\n        <TextField\r\n            variant={\"outlined\"}\r\n            value={title}\r\n            onBlur={deActivatedEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        /*<input\r\n            value={title}\r\n            onBlur={deActivatedEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n        />*/\r\n        : <span onDoubleClick={activatedEditMode}>{props.value}</span>\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport { Delete} from \"@material-ui/icons\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (todoListID: string, title: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n    const tasks = props.tasks.map(t => {\r\n            const removeTask = () => {\r\n                props.removeTask(t.id, props.id)\r\n            };\r\n            const changeStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n\r\n            const changeTaskTitle = (value: string) => {\r\n                props.changeTaskTitle(t.id, value, props.id)\r\n            }\r\n            return (\r\n                <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                    <Checkbox\r\n                        color={\"primary\"}\r\n                        checked={t.isDone}\r\n                        onChange={changeStatus}\r\n                    />\r\n                    {/*<input\r\n                        type=\"checkbox\"\r\n                        checked={t.isDone}\r\n                        onChange={changeStatus}\r\n                    />*/}\r\n                    <EditableSpan value={t.title} changeValue={changeTaskTitle}/>\r\n                    <IconButton onClick={removeTask}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                    {/*<button onClick={removeTask}>X</button>*/}\r\n                </div>\r\n            )\r\n        }\r\n    )\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} changeValue={changeTodolistTitle}/>\r\n                {/*<button onClick={() => {props.removeTodoList(props.id)}}>X</button>*/}\r\n                <IconButton  onClick={() =>{props.removeTodoList(props.id)}}>\r\n                    <Delete/>\r\n                </IconButton>\r\n\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"all\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    /*className={props.filter === \"all\" ? \"active-filter\" : \"\"}*/\r\n                    onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"active\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    /*className={props.filter === \"active\" ? \"active-filter\" : \"\"}*/\r\n                    onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"completed\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    /*className={props.filter === \"completed\" ? \"active-filter\" : \"\"}*/\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {ChangeTaskTitleActionType} from \"./tasks-reducer\";\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string,\r\n    todolistID:string\r\n}\r\nexport type ChangeTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialState: Array<TodolistType> = [\r\n    {id: 'todoListID1', title: \"What to learn\", filter: \"all\"},\r\n    {id: 'todoListID2', title: \"What to buy\", filter: \"all\"}]\r\n\r\nexport type ActionType = RemoveTodoListActionType | AddTodoListActionType |\r\n    ChangeTitleActionType | ChangeFilterActionType\r\n\r\nexport const todolistReducer = (state=initialState, action: ActionType):Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id:action.todolistID, title:action.title,filter:\"all\"}]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            const nextState = state.map(tl=>\r\n            {\r\n                if(tl.id === action.id) {\r\n                    return {...tl, title: action.title}\r\n                }\r\n                return tl;\r\n            });\r\n            return nextState;\r\n\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return  state.map(tl=>\r\n            {\r\n                if(tl.id === action.id) {\r\n                    return {...tl, filter: action.filter}\r\n                }\r\n                return tl;\r\n            });\r\n\r\n\r\n        default:\r\n          return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC = (todolistID: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id:todolistID}\r\n}\r\nexport const AddTodoListAC = (title: string): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistID:v1()}\r\n}\r\nexport const ChangeTitleAC = (todolistID: string, title: string): ChangeTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE',id:todolistID, title: title}\r\n}\r\nexport const ChangeFilterAC = (todoListID: string, filter: FilterValuesType): ChangeFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id:todoListID, filter: filter}\r\n}\r\n\r\n\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from \"./todolist-reducer\";\r\n\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    taskID: string,\r\n    todolistID: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    title: string,\r\n    todolistID: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskID: string,\r\n    isDone: boolean,\r\n    todolistID: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskID: string,\r\n    todolistID: string,\r\n    title:string\r\n}\r\n\r\nlet initialState: TasksStateType ={\r\n    ['todoListID1']: [\r\n    {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    {id: v1(), title: \"JS\", isDone: false}\r\n],\r\n    ['todoListID2']: [\r\n    {id: v1(), title: \"Books\", isDone: true},\r\n    {id: v1(), title: \"Butter\", isDone: false}\r\n]}\r\ntype ActionsType = RemoveTaskActionType |\r\n    AddTaskActionType |\r\n    ChangeTaskStatusActionType |\r\n    ChangeTaskTitleActionType |\r\n    AddTodoListActionType |\r\n    RemoveTodoListActionType\r\n\r\n\r\nexport const tasksReducer = (state=initialState, action: ActionsType):TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todolistID] = copyState[action.todolistID].filter(t => t.id !== action.taskID)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            let task = {id: v1(), title: action.title, isDone: false}\r\n            return {...state, [action.todolistID]: [task, ...state[action.todolistID]]}\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n\r\n            let todoListTasks = state[action.todolistID]\r\n\r\n            let task = todoListTasks.find(t => t.id === action.taskID);\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return {...state, [action.todolistID]: todoListTasks}\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todoListTasks = state[action.todolistID]\r\n            let task = todoListTasks.find(t => t.id === action.taskID);\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return {...state, [action.title]: todoListTasks}\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state,[action.todolistID]:[] }\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskID: taskID, todolistID: todolistID}\r\n}\r\nexport const addTaskAC = (title: string, todolistID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistID}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistID: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS',taskID, isDone, todolistID}\r\n}\r\nexport const changeTaskTitleAC = (taskID: string, title:string,  todolistID: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskID, title, todolistID}\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useReducer} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, IconButton, Typography, Toolbar, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {ChangeFilterAC, todolistReducer, RemoveTodoListAC, AddTodoListAC, ChangeTitleAC} from './state/todolist-reducer';\r\nimport {addTaskAC, removeTaskAC, tasksReducer, changeTaskStatusAC, changeTaskTitleAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { AppRootStateType } from './state/store';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport  type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWitchRedux() {\r\n\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todoLists)\r\n    let tasks = useSelector<AppRootStateType,TasksStateType>(state =>state.tasks)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    function removeTasks(taskID: string, todoListID: string) {\r\n        dispatch(removeTaskAC(taskID,todoListID))\r\n    }\r\n    function addTask(title: string, todoListID: string) {\r\n        dispatch(addTaskAC(title,todoListID))\r\n    }\r\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        dispatch(changeTaskStatusAC(taskID,isDone,todoListID))\r\n\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID:string) {\r\n        dispatch(ChangeFilterAC(todoListID,value))\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        dispatch(RemoveTodoListAC(todoListID))\r\n        dispatch(RemoveTodoListAC(todoListID))\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let action = AddTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n        dispatch(changeTaskTitleAC(taskID,title,todoListID))\r\n    }\r\n\r\n    function changeTodoListTitle(todoListID: string, title: string) {\r\n        dispatch(ChangeTitleAC(todoListID,title))\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">\r\n                    News\r\n                </Typography>\r\n                <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container={true} spacing={3}>\r\n\r\n                {\r\n                    todoLists.map(tl => {\r\n                        let tasksForTodoList = tasks[tl.id];\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodoList = tasks[tl.id].filter(t => t.isDone === false)\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodoList = tasks[tl.id].filter(t => t.isDone === true)\r\n                        }\r\n\r\n                        return <Grid item={true} key={tl.id}>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <TodoList\r\n\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForTodoList}\r\n                                    filter={tl.filter}\r\n                                    addTask={addTask}\r\n                                    removeTask={removeTasks}\r\n                                    changeFilter={changeFilter}\r\n                                    changeStatus={changeStatus}\r\n                                    removeTodoList={removeTodoList}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodoListTitle={changeTodoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n\r\n        </Container>\r\n    </div>\r\n}\r\n\r\nexport default AppWitchRedux;\r\n\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\nimport { todolistReducer } from './todolist-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWitchReducer from './AppWithReducers';\r\nimport {Provider} from \"react-redux\";\r\nimport AppWitchRedux from './AppWithRedux';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n    <AppWitchRedux/></Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}