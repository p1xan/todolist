{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","initialState","Task","dispatch","useDispatch","removeTask","useCallback","taskId","todolistId","action","task","id","type","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","key","className","isDone","Checkbox","newValue","changeTaskTitle","Delete","Todolist","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","map","style","paddingTop","Button","AppWithRedux","v1","todolists","useSelector","state","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","addTodolistAC","spacing","tl","allTodolistTasks","item","Paper","rootReducer","combineReducers","stateCopy","newTasks","newTask","todolistTasks","copyState","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.17c5f2b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm will be rendered\")\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import {TasksStateType} from '../App'\r\nimport {TaskType} from '../Todolist'\r\nimport {v1} from 'uuid'\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer'\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = tasks.filter(t => t.id != action.taskId)\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId]\r\n            return ({\r\n                ...state,\r\n                [action.todolistId]: todolistTasks.map(t => t.id === action.taskId\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t)\r\n            })\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId]\r\n            // найдём нужную таску:\r\n            return ({\r\n                ...state,\r\n                [action.todolistId]: todolistTasks.map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t)\r\n            })\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport {removeTaskAC} from './state/tasks-reducer'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskType} from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(function () {\r\n        const action = removeTaskAC(props.task.id, props.todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }, [props.changeTaskStatus, props.task.id, props.task.id])\r\n\r\n    const onTitleChangeHandler = (newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={removeTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useMemo} from 'react'\r\nimport {FilterValuesType} from './App'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('TODOLIST')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    }, [props.id, props.removeTodolist])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id} task={t}\r\n                                 changeTaskStatus={props.changeTaskStatus}\r\n                                 changeTaskTitle={props.changeTaskTitle}\r\n                                 todolistId={props.id}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import React, {useCallback, useReducer, useState} from 'react'\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n    console.log(\"APPWITHREDUX\")\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskAC(title, todolistId));\r\n    } , [dispatch])\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}